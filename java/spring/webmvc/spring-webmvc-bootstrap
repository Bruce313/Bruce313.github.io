<!DOCTYPE HTML>
<html>
<head>
  <meta charset="utf-8">
  
  <title>spring mvc处理http请求的过程 | L`Bat的博客 | 为者常成 行者常至</title>

  
  <meta name="author" content="L`Bat">
  

  
  <meta name="description" content="介绍servlet实际上是遵循了servlet规范


doPost / doGet 调用DispatcherServlet.doService
request可以存取attribute, 存储原有attrs
设置常用attrs
context
localeResolver 修改点
themeRe">
  

  
  
  <meta name="keywords" content="spring,source">
  

  <meta id="viewport" name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">

  <meta property="og:title" content="spring mvc处理http请求的过程"/>

  <meta property="og:site_name" content="L`Bat的博客"/>

  
  <meta property="og:image" content="/favicon.ico"/>
  

  <link href="/favicon.ico" rel="icon">
  <link rel="alternate" href="/atom.xml" title="L`Bat的博客" type="application/atom+xml">
  <link rel="stylesheet" href="/css/style.css" media="screen" type="text/css">
</head>


<body>
<div class="blog">
  <div class="content">

    <header>
  <div class="site-branding">
    <h1 class="site-title">
      <a href="/">L`Bat的博客</a>
    </h1>
    <p class="site-description">为者常成 行者常至</p>
  </div>
  <nav class="site-navigation">
    <ul>
      
        <li><a href="/">主页</a></li>
      
        <li><a href="/archives">归档</a></li>
      
        <li><a href="/2017/07/18/links">链接</a></li>
      
        <li><a href="/2017/07/18/aboutme">关于我</a></li>
      
    </ul>
  </nav>
</header>

    <main class="site-main posts-loop">
    <article>

  
    
    <h3 class="article-title"><span>spring mvc处理http请求的过程</span></h3>
    
  

  <div class="article-top-meta">
    <span class="posted-on">
      <a href="/java/spring/webmvc/spring-webmvc-bootstrap" rel="bookmark">
        <time class="entry-date published" datetime="2017-07-18T09:49:29.000Z">
          2017-07-18
        </time>
      </a>
    </span>
  </div>


  

  <div class="article-content">
    <div class="entry">
      
        <p><img src="http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuOekBYZAp4jNIChFBubLI2nM27RYIixFBSZFIyqhKO39vfObWoM1j8AoUr5gQXvNNdv9ga9EQbg9GduQM9phnVwPpzOiVB6iySNwBSzdjN2bvgKeW5GXx4XDp2i6cmDcmSNBKvF0ea0QBfQSdrUIMW5nKd991LUmauAkhXs8QQNmihNt-TvrN21BuM9Fzkv_FcK55nUG0nO4ss2byBIdzUc4rN2bG1ki55viQ0OfTG2w3nW20000" alt="spring框架" title="spring-all-comp@1-15"></p>
<p><img src="http://www.plantuml.com/plantuml/png/FOxD2i8m48IlPPyYn_RW3tfBG0iYU174DmZDjWsaIKYsec_lrafEk_lDB3Dj9fredXn84nuXqsuT2cnVJxCZ6ra_Du96zFK7SmEoAlo9ERmS9WNeZUr1thHt1jDTnsZzK6q794Q6BM9p4l_r-kwGRF2NqMglG8u_B8xx0nynuMehmWAvKQ6Tm-KDMixauby0" alt="mvc处理流程图" title="spring-mvc-activity@1-13"></p>
<blockquote>
<p>介绍servlet<br>实际上是遵循了<a href="/java/servlet/">servlet</a>规范</p>
</blockquote>
<ol>
<li>doPost / doGet 调用<code>DispatcherServlet.doService</code></li>
<li>request可以存取attribute, 存储原有attrs</li>
<li>设置常用attrs<ul>
<li>context</li>
<li>localeResolver <strong>修改点</strong></li>
<li>themeResolver <strong>修改点</strong></li>
<li>处理并设置<code>FlashMap</code>(<a href="/java/spring/webmvc/spring-flashmap/">FlashMap</a>是不同请求间共享数据的方式)</li>
</ul>
</li>
<li><p>处理multipart </p>
<ul>
<li>使用<strong>multipartResovler</strong>处理</li>
<li>如果错误写入错误到attrs(attrs是<strong>MultiValueMap</strong>)</li>
</ul>
</li>
<li><p>在<code>List&lt;HandlerMapping&gt;</code>中找第一个<code>HandlerExecutionChain</code> <strong>修改点</strong></p>
</li>
<li>如果是Get请求, 处理302<ul>
<li>ETag</li>
<li>lastModified</li>
<li>设置302</li>
<li>写回<code>Last-Modified</code></li>
</ul>
</li>
<li>请求<code>SimpleUrlHandlerMapping</code>(<strong>求改点</strong>)得到<code>HandlerExcutionChain</code><ul>
<li>如果是handler是String，那么去context里拿到Bean作为handler</li>
<li>在Mapping中获得匹配的(<code>Interceptor.matches</code>)来加入Chain</li>
</ul>
</li>
<li>分配请求到<code>HandlerExecutionChain</code><ul>
<li>调用<code>HandlerInterceptor.preHandle</code>, 一次调用，有false结束</li>
<li>调用<code>HandlerInterceptor.handle</code>, 获得MoSimpleControllerHandlerAdapterdelAndView; <a href="/java/spring/webmvc/handlerSimpleControllerHandlerAdapter">handle内部</a></li>
<li>调用<code>HandlerInterceptor.postHandle</code><blockquote>
<p>常用实现 <code>SimpleControllerHandlerAdapter</code><br>每个Handler的实现自己提供<strong>Adapter</strong>, 因为handler是个object</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<ol>
<li>如果发生<code>Exception | Throwable</code>，调用<code>preHandle</code>已经返回true的<code>Interceptor.triggerAfterCompletion</code> <strong>修改点</strong></li>
<li>清理multipart <strong>修改点</strong></li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="/java/spring/webmvc/async">异步处理</a></li>
</ul>

      
    </div>

  </div>

  <div class="article-footer">
    <div class="article-meta pull-left">

    
      

    <span class="post-categories">
      <i class="icon-categories"></i>
        <a href="/categories/java/">java</a>, <a href="/categories/java/spring/">spring</a>, <a href="/categories/java/spring/webmvc/">webmvc</a>
    </span>
    

    
    

    <span class="post-tags">
      <i class="icon-tags"></i>
        <a href="/tags/spring/">spring</a><a href="/tags/source/">source</a>
    </span>
    

    </div>

    
  </div>
</article>


    </main>

    <footer class="site-footer">
  <p class="site-info">
    Proudly powered by <a href="https://hexo.io/" target="_blank">Hexo</a> and
    Theme by <a href="https://github.com/CodeDaraW/Hacker" target="_blank">Hacker</a>
    </br>
    
    &copy; 2017 L`Bat
    
  </p>
</footer>
    
  </div>
</div>
</body>
</html>